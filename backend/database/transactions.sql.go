// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRecurringTransaction = `-- name: CreateRecurringTransaction :one
INSERT INTO recurring_transactions (user_id, start_date, end_date, interval, days_interval)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, start_date, end_date, interval, days_interval, created, updated
`

type CreateRecurringTransactionParams struct {
	UserID       uuid.UUID
	StartDate    time.Time
	EndDate      time.Time
	Interval     string
	DaysInterval sql.NullInt32
}

func (q *Queries) CreateRecurringTransaction(ctx context.Context, arg CreateRecurringTransactionParams) (RecurringTransaction, error) {
	row := q.db.QueryRowContext(ctx, createRecurringTransaction,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
	)
	var i RecurringTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Interval,
		&i.DaysInterval,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, recurring_transaction_id, amount, description, type, date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, recurring_transaction_id, description, amount, type, date, created, updated
`

type CreateTransactionParams struct {
	UserID                 uuid.UUID
	RecurringTransactionID sql.NullInt32
	Amount                 string
	Description            string
	Type                   string
	Date                   time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.RecurringTransactionID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecurringTransactionID,
		&i.Description,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteRecurringTransaction = `-- name: DeleteRecurringTransaction :exec
DELETE FROM recurring_transactions 
WHERE id = $1 AND user_id = $2
`

type DeleteRecurringTransactionParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteRecurringTransaction(ctx context.Context, arg DeleteRecurringTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecurringTransaction, arg.ID, arg.UserID)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions 
WHERE id = $1 AND user_id = $2
`

type DeleteTransactionParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.UserID)
	return err
}

const getBaseTransactionsBetweenDates = `-- name: GetBaseTransactionsBetweenDates :many
SELECT id, user_id, recurring_transaction_id, description, amount, type, date, created, updated FROM transactions
WHERE user_id = $1 AND date >= $4 AND date <= $5
ORDER BY date
LIMIT $2
OFFSET $3
`

type GetBaseTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

func (q *Queries) GetBaseTransactionsBetweenDates(ctx context.Context, arg GetBaseTransactionsBetweenDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getBaseTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RecurringTransactionID,
			&i.Description,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseTransactionsBetweenDates = `-- name: GetExpenseTransactionsBetweenDates :many
SELECT ft.id, ft.user_id, ft.recurring_transaction_id, ft.description, ft.amount, ft.type, ft.date, ft.created, ft.updated, ft.start_date, ft.end_date, ft.interval, ft.days_interval, ft.recurring_created, ft.recurring_updated FROM full_transaction ft
WHERE ft.user_id = $1 AND ft.amount < 0 AND ft.date >= $4 AND ft.date <= $5
ORDER BY ft.date
LIMIT $2
OFFSET $3
`

type GetExpenseTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetExpenseTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetExpenseTransactionsBetweenDates(ctx context.Context, arg GetExpenseTransactionsBetweenDatesParams) ([]GetExpenseTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpenseTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpenseTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetExpenseTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncomeTransactionsBetweenDates = `-- name: GetIncomeTransactionsBetweenDates :many
SELECT ft.id, ft.user_id, ft.recurring_transaction_id, ft.description, ft.amount, ft.type, ft.date, ft.created, ft.updated, ft.start_date, ft.end_date, ft.interval, ft.days_interval, ft.recurring_created, ft.recurring_updated FROM full_transaction ft
WHERE ft.user_id = $1 AND ft.amount > 0 AND ft.date >= $4 AND ft.date <= $5
ORDER BY ft.date
LIMIT $2
OFFSET $3
`

type GetIncomeTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetIncomeTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetIncomeTransactionsBetweenDates(ctx context.Context, arg GetIncomeTransactionsBetweenDatesParams) ([]GetIncomeTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncomeTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncomeTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetIncomeTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsBetweenDates = `-- name: GetTransactionsBetweenDates :many
SELECT ft.id, ft.user_id, ft.recurring_transaction_id, ft.description, ft.amount, ft.type, ft.date, ft.created, ft.updated, ft.start_date, ft.end_date, ft.interval, ft.days_interval, ft.recurring_created, ft.recurring_updated FROM full_transaction ft
WHERE ft.user_id = $1 AND ft.date >= $4 AND ft.date <= $5
ORDER BY ft.date
LIMIT $2
OFFSET $3
`

type GetTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetTransactionsBetweenDates(ctx context.Context, arg GetTransactionsBetweenDatesParams) ([]GetTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecurringTransaction = `-- name: UpdateRecurringTransaction :exec
UPDATE recurring_transactions 
SET start_date = $3, end_date = $4, interval = $5, days_interval = $6, updated = (now() at time zone 'utc')
WHERE id = $1 AND user_id = $2
`

type UpdateRecurringTransactionParams struct {
	ID           int32
	UserID       uuid.UUID
	StartDate    time.Time
	EndDate      time.Time
	Interval     string
	DaysInterval sql.NullInt32
}

func (q *Queries) UpdateRecurringTransaction(ctx context.Context, arg UpdateRecurringTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateRecurringTransaction,
		arg.ID,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
	)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET amount = $3, description = $4, type = $5, date = $6, updated = (now() at time zone 'utc')
WHERE id = $1 AND user_id = $2
`

type UpdateTransactionParams struct {
	ID          int32
	UserID      uuid.UUID
	Amount      string
	Description string
	Type        string
	Date        time.Time
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	return err
}
