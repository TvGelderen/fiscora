// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated
`

type CreateTransactionParams struct {
	UserID       uuid.UUID
	Amount       string
	Description  string
	Type         string
	Recurring    bool
	StartDate    time.Time
	EndDate      time.Time
	Interval     sql.NullString
	DaysInterval sql.NullInt32
	Created      time.Time
	Updated      time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Recurring,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
		arg.Created,
		arg.Updated,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.Recurring,
		&i.StartDate,
		&i.EndDate,
		&i.Interval,
		&i.DaysInterval,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions 
WHERE id = $1 AND user_id = $2
`

type DeleteTransactionParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.UserID)
	return err
}

const getIncomingTransactions = `-- name: GetIncomingTransactions :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND amount > 0
`

func (q *Queries) GetIncomingTransactions(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getIncomingTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncomingTransactionsBetweenDates = `-- name: GetIncomingTransactionsBetweenDates :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND amount > 0 AND start_date <= $2 AND end_date >= $3
ORDER BY start_date
LIMIT $4
OFFSET $5
`

type GetIncomingTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
	Limit     int32
	Offset    int32
}

func (q *Queries) GetIncomingTransactionsBetweenDates(ctx context.Context, arg GetIncomingTransactionsBetweenDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getIncomingTransactionsBetweenDates,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutgoingTransactions = `-- name: GetOutgoingTransactions :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND amount < 0
`

func (q *Queries) GetOutgoingTransactions(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getOutgoingTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutgoingTransactionsBetweenDates = `-- name: GetOutgoingTransactionsBetweenDates :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND amount < 0 AND start_date <= $2 AND end_date >= $3
ORDER BY start_date
LIMIT $4
OFFSET $5
`

type GetOutgoingTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
	Limit     int32
	Offset    int32
}

func (q *Queries) GetOutgoingTransactionsBetweenDates(ctx context.Context, arg GetOutgoingTransactionsBetweenDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getOutgoingTransactionsBetweenDates,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1
ORDER BY start_date
LIMIT $2
OFFSET $3
`

type GetTransactionsParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsBetweenDates = `-- name: GetTransactionsBetweenDates :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND start_date <= $2 AND end_date >= $3
ORDER BY start_date
LIMIT $4
OFFSET $5
`

type GetTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
	Limit     int32
	Offset    int32
}

func (q *Queries) GetTransactionsBetweenDates(ctx context.Context, arg GetTransactionsBetweenDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsBetweenDates,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByType = `-- name: GetTransactionsByType :many
SELECT id, user_id, amount, description, type, recurring, start_date, end_date, interval, days_interval, created, updated FROM transactions 
WHERE user_id = $1 AND type = $2
`

type GetTransactionsByTypeParams struct {
	UserID uuid.UUID
	Type   string
}

func (q *Queries) GetTransactionsByType(ctx context.Context, arg GetTransactionsByTypeParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByType, arg.UserID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.Recurring,
			&i.StartDate,
			&i.EndDate,
			&i.Interval,
			&i.DaysInterval,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET amount = $3, description = $4, type = $5, recurring = $6, start_date = $7, end_date = $8, interval = $9, days_interval = $10, updated = $11
WHERE id = $1 AND user_id = $2
`

type UpdateTransactionParams struct {
	ID           int32
	UserID       uuid.UUID
	Amount       string
	Description  string
	Type         string
	Recurring    bool
	StartDate    time.Time
	EndDate      time.Time
	Interval     sql.NullString
	DaysInterval sql.NullInt32
	Updated      time.Time
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Recurring,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
		arg.Updated,
	)
	return err
}
