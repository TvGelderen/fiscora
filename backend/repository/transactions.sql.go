// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transactions.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRecurringTransaction = `-- name: CreateRecurringTransaction :one
INSERT INTO recurring_transactions (user_id, start_date, end_date, interval, days_interval)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, start_date, end_date, interval, days_interval, created, updated
`

type CreateRecurringTransactionParams struct {
	UserID       uuid.UUID
	StartDate    time.Time
	EndDate      time.Time
	Interval     string
	DaysInterval sql.NullInt32
}

func (q *Queries) CreateRecurringTransaction(ctx context.Context, arg CreateRecurringTransactionParams) (RecurringTransaction, error) {
	row := q.db.QueryRowContext(ctx, createRecurringTransaction,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
	)
	var i RecurringTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Interval,
		&i.DaysInterval,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, recurring_transaction_id, amount, description, type, date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, budget_expense_id, recurring_transaction_id, description, amount, type, date, created, updated
`

type CreateTransactionParams struct {
	UserID                 uuid.UUID
	RecurringTransactionID sql.NullInt32
	Amount                 string
	Description            string
	Type                   string
	Date                   time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.RecurringTransactionID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BudgetExpenseID,
		&i.RecurringTransactionID,
		&i.Description,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteRecurringTransaction = `-- name: DeleteRecurringTransaction :exec
DELETE FROM recurring_transactions 
WHERE id = $1 AND user_id = $2
`

type DeleteRecurringTransactionParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteRecurringTransaction(ctx context.Context, arg DeleteRecurringTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecurringTransaction, arg.ID, arg.UserID)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions 
WHERE id = $1 AND user_id = $2
`

type DeleteTransactionParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.UserID)
	return err
}

const deleteTransactionsByRecurringTransactionId = `-- name: DeleteTransactionsByRecurringTransactionId :execrows
DELETE FROM transactions 
WHERE recurring_transaction_id = $2::int AND user_id = $1
`

type DeleteTransactionsByRecurringTransactionIdParams struct {
	UserID                 uuid.UUID
	RecurringTransactionID int32
}

func (q *Queries) DeleteTransactionsByRecurringTransactionId(ctx context.Context, arg DeleteTransactionsByRecurringTransactionIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTransactionsByRecurringTransactionId, arg.UserID, arg.RecurringTransactionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteTransactionsByRecurringTransactionIdAndWhereDate = `-- name: DeleteTransactionsByRecurringTransactionIdAndWhereDate :execrows
DELETE FROM transactions 
WHERE recurring_transaction_id = $3::int AND user_id = $1 AND date > $2
`

type DeleteTransactionsByRecurringTransactionIdAndWhereDateParams struct {
	UserID                 uuid.UUID
	Date                   time.Time
	RecurringTransactionID int32
}

func (q *Queries) DeleteTransactionsByRecurringTransactionIdAndWhereDate(ctx context.Context, arg DeleteTransactionsByRecurringTransactionIdAndWhereDateParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTransactionsByRecurringTransactionIdAndWhereDate, arg.UserID, arg.Date, arg.RecurringTransactionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBaseTransactionsBetweenDates = `-- name: GetBaseTransactionsBetweenDates :many
SELECT id, user_id, budget_expense_id, recurring_transaction_id, description, amount, type, date, created, updated FROM transactions
WHERE user_id = $1 AND amount < 0 AND date >= $4 AND date <= $5
ORDER BY date
LIMIT $2
OFFSET $3
`

type GetBaseTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

func (q *Queries) GetBaseTransactionsBetweenDates(ctx context.Context, arg GetBaseTransactionsBetweenDatesParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getBaseTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BudgetExpenseID,
			&i.RecurringTransactionID,
			&i.Description,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseTransactionAmountsBetweenDates = `-- name: GetExpenseTransactionAmountsBetweenDates :many
SELECT amount, type FROM transactions
WHERE user_id = $1 AND amount > 0 AND date >= $2 AND date <= $3
`

type GetExpenseTransactionAmountsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
}

type GetExpenseTransactionAmountsBetweenDatesRow struct {
	Amount string
	Type   string
}

func (q *Queries) GetExpenseTransactionAmountsBetweenDates(ctx context.Context, arg GetExpenseTransactionAmountsBetweenDatesParams) ([]GetExpenseTransactionAmountsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpenseTransactionAmountsBetweenDates, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpenseTransactionAmountsBetweenDatesRow
	for rows.Next() {
		var i GetExpenseTransactionAmountsBetweenDatesRow
		if err := rows.Scan(&i.Amount, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseTransactionsBetweenDates = `-- name: GetExpenseTransactionsBetweenDates :many
SELECT t.id, t.user_id, t.budget_expense_id, t.recurring_transaction_id, t.description, t.amount, t.type, t.date, t.created, t.updated, t.start_date, t.end_date, t.interval, t.days_interval, t.recurring_created, t.recurring_updated, t.budget_id, t.budget_name, t.budget_expense_name FROM full_transaction t
WHERE t.user_id = $1 AND t.amount < 0 AND t.date >= $4 AND t.date <= $5
ORDER BY t.date
LIMIT $2
OFFSET $3
`

type GetExpenseTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetExpenseTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetExpenseTransactionsBetweenDates(ctx context.Context, arg GetExpenseTransactionsBetweenDatesParams) ([]GetExpenseTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpenseTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpenseTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetExpenseTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.BudgetExpenseID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
			&i.FullTransaction.BudgetID,
			&i.FullTransaction.BudgetName,
			&i.FullTransaction.BudgetExpenseName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncomeTransactionAmountsBetweenDates = `-- name: GetIncomeTransactionAmountsBetweenDates :many
SELECT amount, type FROM transactions
WHERE user_id = $1 AND date >= $2 AND date <= $3
`

type GetIncomeTransactionAmountsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
}

type GetIncomeTransactionAmountsBetweenDatesRow struct {
	Amount string
	Type   string
}

func (q *Queries) GetIncomeTransactionAmountsBetweenDates(ctx context.Context, arg GetIncomeTransactionAmountsBetweenDatesParams) ([]GetIncomeTransactionAmountsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncomeTransactionAmountsBetweenDates, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncomeTransactionAmountsBetweenDatesRow
	for rows.Next() {
		var i GetIncomeTransactionAmountsBetweenDatesRow
		if err := rows.Scan(&i.Amount, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncomeTransactionsBetweenDates = `-- name: GetIncomeTransactionsBetweenDates :many
SELECT t.id, t.user_id, t.budget_expense_id, t.recurring_transaction_id, t.description, t.amount, t.type, t.date, t.created, t.updated, t.start_date, t.end_date, t.interval, t.days_interval, t.recurring_created, t.recurring_updated, t.budget_id, t.budget_name, t.budget_expense_name FROM full_transaction t
WHERE t.user_id = $1 AND t.amount > 0 AND t.date >= $4 AND t.date <= $5
ORDER BY t.date
LIMIT $2
OFFSET $3
`

type GetIncomeTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetIncomeTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetIncomeTransactionsBetweenDates(ctx context.Context, arg GetIncomeTransactionsBetweenDatesParams) ([]GetIncomeTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncomeTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncomeTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetIncomeTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.BudgetExpenseID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
			&i.FullTransaction.BudgetID,
			&i.FullTransaction.BudgetName,
			&i.FullTransaction.BudgetExpenseName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecurringTransactionById = `-- name: GetRecurringTransactionById :one
SELECT id, user_id, start_date, end_date, interval, days_interval, created, updated FROM recurring_transactions
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetRecurringTransactionByIdParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) GetRecurringTransactionById(ctx context.Context, arg GetRecurringTransactionByIdParams) (RecurringTransaction, error) {
	row := q.db.QueryRowContext(ctx, getRecurringTransactionById, arg.ID, arg.UserID)
	var i RecurringTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Interval,
		&i.DaysInterval,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTransactionAmountsBetweenDates = `-- name: GetTransactionAmountsBetweenDates :many
SELECT amount FROM transactions
WHERE user_id = $1 AND date >= $2 AND date <= $3
`

type GetTransactionAmountsBetweenDatesParams struct {
	UserID    uuid.UUID
	StartDate time.Time
	EndDate   time.Time
}

func (q *Queries) GetTransactionAmountsBetweenDates(ctx context.Context, arg GetTransactionAmountsBetweenDatesParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionAmountsBetweenDates, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var amount string
		if err := rows.Scan(&amount); err != nil {
			return nil, err
		}
		items = append(items, amount)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, user_id, budget_expense_id, recurring_transaction_id, description, amount, type, date, created, updated FROM transactions
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetTransactionByIdParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) GetTransactionById(ctx context.Context, arg GetTransactionByIdParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, arg.ID, arg.UserID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BudgetExpenseID,
		&i.RecurringTransactionID,
		&i.Description,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTransactionsBetweenDates = `-- name: GetTransactionsBetweenDates :many
SELECT t.id, t.user_id, t.budget_expense_id, t.recurring_transaction_id, t.description, t.amount, t.type, t.date, t.created, t.updated, t.start_date, t.end_date, t.interval, t.days_interval, t.recurring_created, t.recurring_updated, t.budget_id, t.budget_name, t.budget_expense_name FROM full_transaction t
WHERE t.user_id = $1 AND t.date >= $4 AND t.date <= $5
ORDER BY t.date
LIMIT $2
OFFSET $3
`

type GetTransactionsBetweenDatesParams struct {
	UserID    uuid.UUID
	Limit     int32
	Offset    int32
	StartDate time.Time
	EndDate   time.Time
}

type GetTransactionsBetweenDatesRow struct {
	FullTransaction FullTransaction
}

func (q *Queries) GetTransactionsBetweenDates(ctx context.Context, arg GetTransactionsBetweenDatesParams) ([]GetTransactionsBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsBetweenDates,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsBetweenDatesRow
	for rows.Next() {
		var i GetTransactionsBetweenDatesRow
		if err := rows.Scan(
			&i.FullTransaction.ID,
			&i.FullTransaction.UserID,
			&i.FullTransaction.BudgetExpenseID,
			&i.FullTransaction.RecurringTransactionID,
			&i.FullTransaction.Description,
			&i.FullTransaction.Amount,
			&i.FullTransaction.Type,
			&i.FullTransaction.Date,
			&i.FullTransaction.Created,
			&i.FullTransaction.Updated,
			&i.FullTransaction.StartDate,
			&i.FullTransaction.EndDate,
			&i.FullTransaction.Interval,
			&i.FullTransaction.DaysInterval,
			&i.FullTransaction.RecurringCreated,
			&i.FullTransaction.RecurringUpdated,
			&i.FullTransaction.BudgetID,
			&i.FullTransaction.BudgetName,
			&i.FullTransaction.BudgetExpenseName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByRecurringTransactionId = `-- name: GetTransactionsByRecurringTransactionId :many
SELECT id, user_id, budget_expense_id, recurring_transaction_id, description, amount, type, date, created, updated FROM transactions
WHERE recurring_transaction_id = $2::int AND user_id = $1
`

type GetTransactionsByRecurringTransactionIdParams struct {
	UserID                 uuid.UUID
	RecurringTransactionID int32
}

func (q *Queries) GetTransactionsByRecurringTransactionId(ctx context.Context, arg GetTransactionsByRecurringTransactionIdParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByRecurringTransactionId, arg.UserID, arg.RecurringTransactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BudgetExpenseID,
			&i.RecurringTransactionID,
			&i.Description,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecurringTransaction = `-- name: UpdateRecurringTransaction :exec
UPDATE recurring_transactions 
SET start_date = $3, end_date = $4, interval = $5, days_interval = $6, updated = (now() at time zone 'utc')
WHERE id = $1 AND user_id = $2
`

type UpdateRecurringTransactionParams struct {
	ID           int32
	UserID       uuid.UUID
	StartDate    time.Time
	EndDate      time.Time
	Interval     string
	DaysInterval sql.NullInt32
}

func (q *Queries) UpdateRecurringTransaction(ctx context.Context, arg UpdateRecurringTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateRecurringTransaction,
		arg.ID,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Interval,
		arg.DaysInterval,
	)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
SET amount = $3, description = $4, type = $5, date = $6, updated = (now() at time zone 'utc')
WHERE id = $1 AND user_id = $2
`

type UpdateTransactionParams struct {
	ID          int32
	UserID      uuid.UUID
	Amount      string
	Description string
	Type        string
	Date        time.Time
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.Type,
		arg.Date,
	)
	return err
}
